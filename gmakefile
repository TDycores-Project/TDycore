# -*- mode: makefile-gmake -*-

TDYCORE_DIR ?= $(CURDIR)
include ./lib/tdycore/conf/variables

OBJDIR := $(PETSC_ARCH)/obj
MODDIR := $(PETSC_ARCH)/include
LIBDIR := $(abspath $(PETSC_ARCH)/lib)

libtdycore_shared := $(LIBDIR)/libtdycore.$(SL_LINKER_SUFFIX)
libtdycore_static := $(LIBDIR)/libtdycore.$(AR_LIB_SUFFIX)
libtdycore := $(if $(filter-out no,$(BUILDSHAREDLIB)),$(libtdycore_shared),$(libtdycore_static))

pkgs := tdycore
srcs-tdycore.c   := $(wildcard src/mesh/*.c src/mpfao/*.c src/mpfao/2D/*.c src/mpfao/3D/*.c src/*.c src/interface/ftn/*.c)
srcs-tdycore.cxx := $(wildcard src/*.cxx)
srcs-tdycore.F90 := $(wildcard src/f90-mod/*.F90)

all : $(libtdycore)

.SECONDEXPANSION: # to expand $$(@D)/.DIR

# check missing Fortran compiler
ifeq ($(FC),)
$(info GNU Make build requires PETSc with Fortran support)
$(info Try using CMake build with 'make all-cmake')
$(error '')
endif

# workaround old Cygwin versions
ifeq ($(PETSC_CYGWIN_BROKEN_PIPE),1)
ifeq ($(shell basename $(AR)),ar)
  V ?= 1
endif
endif
ifeq ($(V),)           # Print help and short compile line
  quiet_HELP := "Use \"$(MAKE) V=1\" to see the verbose compile lines.\n"
  quiet = @printf $(quiet_HELP)$(eval quiet_HELP:=)"  %10s %s\n" "$1$2" "$@"; $($1)
else ifeq ($(V),0)     # Same as previous, but do not print any help
  quiet = @printf "  %10s %s\n" "$1$2" "$@"; $($1)
else                   # Show the full command line
  quiet = $($1)
endif

pcc = $(if $(findstring CONLY,$(PETSC_LANGUAGE)),CC,CXX)
COMPILE.c = $(call quiet,$(pcc)) $(PCC_FLAGS) $(CFLAGS) $(CCPPFLAGS) $(C_DEPFLAGS) -c
COMPILE.cxx = $(call quiet,CXX) $(CXX_FLAGS) $(CFLAGS) $(CCPPFLAGS) $(CXX_DEPFLAGS) -c
ifneq ($(FC_MODULE_OUTPUT_FLAG),)
COMPILE.fc = $(call quiet,FC) $(FC_FLAGS) $(FFLAGS) $(FCPPFLAGS) $(FC_DEPFLAGS) $(FC_MODULE_OUTPUT_FLAG)$(MODDIR) -c
else
FCMOD = cd $(MODDIR) && $(FC)
COMPILE.fc = $(call quiet,FCMOD) $(FC_FLAGS) $(FFLAGS) $(FCPPFLAGS) $(FC_DEPFLAGS) -c
endif

langs := c cxx F90
concatlangs = $(foreach lang, $(langs), $(srcs-$(1).$(lang):%.$(lang)=$(OBJDIR)/%.o))
srcs.o := $(foreach pkg, $(pkgs), $(call concatlangs,$(pkg)))
.SECONDARY: $(srcs.o)

$(libtdycore_shared) : objs := $(srcs.o)
$(libtdycore_shared) : libs := $(PETSC_LIB)
$(libtdycore_static) : objs := $(srcs.o)

%.$(SL_LINKER_SUFFIX) : $$(objs) | $$(@D)/.DIR
	$(call quiet,CLINKER) -shared -o $@ $^ $(libs)
ifneq ($(DSYMUTIL),true)
	$(call quiet,DSYMUTIL) $@
endif

%.$(AR_LIB_SUFFIX) : $$(objs) | $$(@D)/.DIR
ifeq ($(findstring win32fe lib,$(AR)),)
	@$(RM) $@
	$(call quiet,AR) $(AR_FLAGS) $@ $^
	$(call quiet,RANLIB) $@
else
	@$(RM) $@ $@.args
	@cygpath -w $^ > $@.args
	$(call quiet,AR) $(AR_FLAGS) $@ @$@.args
	@$(RM) $@.args
endif

$(OBJDIR)/%.o : %.c | $$(@D)/.DIR
	$(COMPILE.c) $(abspath $<) -o $@

$(OBJDIR)/%.o : %.cxx | $$(@D)/.DIR
	$(COMPILE.cxx) $(abspath $<) -o $@

$(OBJDIR)/%.o : %.F90 | $$(@D)/.DIR $(MODDIR)/.DIR
	$(COMPILE.fc) $(abspath $<) -o $(if $(FCMOD),$(abspath $@),$@)

TEST.c = \
	demo/steady/steady.c \
	demo/transient/transient.c \
	demo/transient/transient_mpfao.c \
	demo/mpfao/mpfao.c \
#	demo/transient/transient_th_mpfao.c \

TEST.F90 = \
	demo/steadyf90/steadyf90.F90 \
	demo/transient/transient_mpfaof90.F90 \
	demo/transient/transient_snes_mpfaof90.F90

# Demo executables
$(TEST.c:%.c=%.o) : %.o : %.c
	$(COMPILE.c) $(abspath $<) -o $@

$(TEST.c:%.c=%) : demo/% : demo/%.o $$^ $(libtdycore)
	$(call quiet,CLINKER) -o $@ $^ $(TDYCORE_LIB) $(LIBS)

$(TEST.F90:%.F90=%.o) : MODDIR = $(PETSC_ARCH)/obj/demo-modules
$(TEST.F90:%.F90=%.o) : %.o : %.F90 $(libtdycore) | $$(@D)/.DIR $$(MODDIR)/.DIR
	$(COMPILE.fc) $(abspath $<) -o $(if $(FCMOD),$(abspath $@),$@)

$(TEST.F90:%.F90=%) : demo/% : demo/%.o $$^ $(libtdycore)
	$(call quiet,FLINKER) -o $@ $^ $(TDYCORE_LIB) $(LIBS)

# Hack: manual dependencies on object files
tdycore.mod.o:= $(OBJDIR)/src/tdycore.o
srcs-tdycore.F90.o = $(srcs-tdycore.F90:%.F90=$(OBJDIR)/%.o)
$(filter-out $(tdycore.mod.o),$(srcs-tdycore.F90.o)): | $(tdycore.mod.o)

%/.DIR :
	@$(MKDIR) $(@D)
	@touch $@

.PRECIOUS: %/.DIR
.SUFFIXES: # Clear .SUFFIXES because we don't use implicit rules
.DELETE_ON_ERROR: # Delete likely-corrupt target file if rule fails
.PHONY: all clean print print-%

clean:
	@$(RM) -r $(OBJDIR) $(LIBDIR)/libtdycore.* $(MODDIR)/tdycore.mod

testname = test-$(subst _,-,$(basename $(notdir $(1))))
ALLTESTS = $(foreach path,$(TEST.c) $(TEST.F90),$(call testname,$(path)))
# Set target-specific variables for each test
define target_specific_var
  $(call testname,$(1)) : DEMO_EXE = $(basename $(1))
endef
$(foreach demo_src,$(TEST.c) $(TEST.F90),$(eval $(call target_specific_var,$(demo_src))))

$(ALLTESTS) : test-% : $$(DEMO_EXE)
	+@$(MAKE) -C regression_tests $@

ifdef CMOCKA_INCLUDE_DIR # Begin unit tests

ifndef MPI_NPROC
MPI_NPROC=1
endif

# Unit test source files
UTEST.c = \
	src/tests/test_tdyinit.c \

# Compile the unit tests
$(UTEST.c:%.c=%.o) : %.o : %.c
	$(COMPILE.c) -I$(CMOCKA_INCLUDE_DIR) $(abspath $<) -o $@

# Link the unit tests into executables
$(UTEST.c:%.c=%) : % : %.o $$^ $(libtdycore)
	$(call quiet,CLINKER) -L$(CMOCKA_LIBRARY_DIR) -o $@ $^ -lcmocka-static $(TDYCORE_LIB) $(LIBS)

# Make a list of all the unit test exes.
utestname = $(basename $(1))
#utestname = utest-$(subst _,-,$(basename $(notdir $(1))))
ALLUNITTESTS = $(foreach path,$(UTEST.c),$(call utestname,$(path)))

$(ALLUNITTESTS) : % : $$(UTEST_EXE)

unit-test : % : $(UTEST.c:%.c=%)
	+@find src -name "test_*" -executable -exec mpiexec -np ${MPI_NPROC} {} \;

endif  # ifdef CMOCKA_INCLUDE_DIR

test : unit-test $(ALLTESTS)

# make print VAR=the-variable
print : ; @echo $($(VAR))
# make print-VARIABLE
print-% : ; @echo $* = $($*)

allobj.d := $(srcs.o:%.o=%.d)
# Tell make that allobj.d are all up to date. Without
# this, the include below has quadratic complexity.
$(allobj.d) : ;

-include $(allobj.d)
