#!/usr/bin/env python3

# Use this script with the CSV profile data generated by -tdy_timers.
# You can run it with various options to inspect profiling results.

def usage():
    print('tdyprof: Usage:')
    print('tdyprof <profile.csv> <command> [options]\n')
    print('Commands are:')
    print('  topN [rank] - Show the N entries that take the most time')
    print('                [optionally for only the given rank, otherwise')
    print('                 reports max times across ranks].')
    exit()

def parse_csv(csv_file):
    import io, csv
    with open(csv_file, 'r') as f:
        data = csv.DictReader(f)
        rows = [r for r in data]
        return rows

def topN(data, N, rank=-1):
    if len(data) == 0:
        return
    if (rank == -1):
        print('tdyprof: showing top %d hits (max times across ranks):'%N)
    else:
        print('tdyprof: showing top %d hits for rank %d:'%(N, rank))
    columns = ['Stage Name', 'Event Name', 'Time', 'FLOP']
    print('{: >20} {: >40} {: >10} {: >16}'.format(*columns))
    # If a rank was specified, sort the rows in descending order by time.
    if rank >= 0:
        sorted_rows = sorted([r for r in data if int(r['Rank']) == rank],
                             key=lambda row: float(row['Time']),
                             reverse=True)
    # Otherwise, pick out the max times for each event.
    else:
        max_time_rows = []
        rank0_rows = [r for r in data if int(r['Rank']) == 0]
        for row in rank0_rows:
            all_ranks = [r for r in data
                         if r['Stage Name'] == row['Stage Name']
                         and r['Event Name'] == row['Event Name']]
            max_time_rows.append(sorted(all_ranks,
                                        key=lambda r: float(r['Time']),
                                        reverse=True)[0])
        sorted_rows = sorted(max_time_rows,
                             key=lambda row: float(row['Time']),
                             reverse=True)

    # Report the top N results.
    for i in range(N):
        row = [sorted_rows[i][c][:40] for c in columns]
        print('{: >20} {: >40} {: >10} {: >16}'.format(*row))

def main():
    import sys
    if len(sys.argv) < 3:
        usage()

    csv_file = sys.argv[1]
    data = parse_csv(csv_file)

    # Execute the given command with its given args.
    command = sys.argv[2]
    if command.startswith('top'):
        N = min(int(command[3:]), len(data))
        rank = -1
        if len(sys.argv) > 3:
            rank = int(sys.argv[3])
        topN(data, N, rank=rank)
if __name__ == '__main__':
    main()
