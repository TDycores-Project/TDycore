#!/usr/bin/env python3

# This script generates plots for scaling studies. Use it with CSV profile
# data generated by -tdy_timers.

import math
import matplotlib.pyplot as plt
import pandas as pd
from optparse import OptionParser

def usage():
    print('tdyperfplot: Usage:')
    print('tdyperfplot [options] <profile1.csv> <profile2.csv> ... <profileN.csv>\n')
    print('Options:')
    print('  -e e1,e2,...,eN: Plot measurements for events e1..eN (default: plot total time)')
    exit()

def extract_metadata(prof_df):
    md_row = None
    md_names = None
    md = {}
    md_frame = prof_df.tail(3)
    for i, s in md_frame.iterrows():
        if s['Stage Name'] == 'METADATA':
            md_row = i
        elif md_row:
            if not md_names:
                md_names = []
                names = s.to_list()
                for name in names:
                    md_names.append(name)
            else:
                mdata = s.to_list()
                for i, val in enumerate(mdata):
                    if not (isinstance(val, float) and math.isnan(val)):
                        md[md_names[i]] = val
    prof_df = prof_df[:-3]
    return prof_df, md

def plot_profiles(files, events):
    labels = {}
    times = {}      # time [s]
    throughput = {} # throughput [# cells) / time]

    # Gather throughput data for the plot from the given files.
    for f in files:
        # Read the profile into a dataframe.
        prof = pd.read_csv(f)
        prof, md = extract_metadata(prof)

        Nx, Ny, Nz = int(md['Nx']), int(md['Ny']), int(md['Nz'])
        num_cells = Nx * Ny * Nz
        if num_cells not in x:
            times[num_cells] = []
            throughput[num_cells] = []
            labels[num_cells] = []

        # Extract the desired events.
        if events and len(events) > 0:
            for e in events:
                t_e = prof.loc[prof['Event Name'] == e]['Time'].sum()
                times[num_cells].append(t_e)
                throughput[num_cells].append(num_cells/t_e)
                labels[num_cells].append(e)
        else: # total time
            t_tot = prof.loc[prof['Event Name'] == 'summary']['Time'].sum()
            times[num_cells].append(t_tot)
            throughput[num_cells].append(num_cells/t_tot)
            labels[num_cells].append('Total')

    # Plot the thing.
    for nc in times.keys():
        tp = throughput[nc]
        t = times[nc]
        label = 
    data = {
        'Time [s]': times,
        'Throughput [cells / s]': throughput
    }
    df = pd.DataFrame(
                     )
def main():
    import sys
    if len(sys.argv) < 2:
        usage()

    parser = OptionParser()
    parser.add_option("-e", "--events", dest="events", default=None,
                      help="Events to plot")

    options, args = parser.parse_args()
    if options.events and ',' in options.events:
        events = options.events.split(',')
    elif options.events:
        events = [options.events]
    else:
        events = []
    files = args

    if len(files) < 1:
      print("tdyperfplot: need at least one profile.")
      exit()

    plot_profiles(files, events)

if __name__ == '__main__':
    main()
