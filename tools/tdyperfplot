#!/usr/bin/env python3

# This script generates plots for scaling studies. Use it with CSV profile
# data generated by -tdy_timers.

import math
import pandas as pd
import matplotlib.pyplot as plt
from optparse import OptionParser

def usage():
    print('tdyperfplot: Usage:')
    print('tdyperfplot [options] <profile1.csv> <profile2.csv> ... <profileN.csv>\n')
    print('Options:')
    print('  -e e1,e2,...,eN: Plot measurements for events e1..eN (default: plot total time)')
    exit()

def extract_metadata(prof_df):
    md_row = None
    md_names = None
    md = {}
    md_frame = prof_df.tail(3)
    for i, s in md_frame.iterrows():
        if s['Stage Name'] == 'METADATA':
            md_row = i
        elif md_row:
            if not md_names:
                md_names = []
                names = s.to_list()
                for name in names:
                    md_names.append(name)
            else:
                mdata = s.to_list()
                for i, val in enumerate(mdata):
                    if not (isinstance(val, float) and math.isnan(val)):
                        md[md_names[i]] = val
    prof_df = prof_df[:-3]
    return prof_df, md

def plot_profiles(files, events):
    plt.title('TDycore Scaling')
    plt.xlabel(' Scaling')
    for f in files:
        # Read the profile into a dataframe.
        prof = pd.read_csv(f)
        prof, md = extract_metadata(prof)
#        print(prof.where(prof['Event Name'] == 'summary', None))

def main():
    import sys
    if len(sys.argv) < 2:
        usage()

    parser = OptionParser()
    parser.add_option("-e", "--events", dest="events", default="total",
                      help="Events to plot")

    options, args = parser.parse_args()
    if ',' in options.events:
        events = options.events.split(',')
    else:
        events = [options.events]
    files = args

    if len(files) < 1:
      print("tdyperfplot: need at least one profile.")
      exit()

    plot_profiles(files, events)

if __name__ == '__main__':
    main()
